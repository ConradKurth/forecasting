// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: shopify_store.sql

package shopify

import (
	"context"

	"github.com/ConradKurth/forecasting/backend/pkg/id"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOrUpdateShopifyStore = `-- name: CreateOrUpdateShopifyStore :one
INSERT INTO shopify_store (id, shop_domain, shop_name, timezone, currency, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, NOW(), NOW())
ON CONFLICT (shop_domain)
DO UPDATE SET
    shop_name = EXCLUDED.shop_name,
    timezone = EXCLUDED.timezone,
    currency = EXCLUDED.currency,
    updated_at = NOW()
RETURNING id, shop_domain, shop_name, timezone, currency, created_at, updated_at
`

type CreateOrUpdateShopifyStoreParams struct {
	ID         id.ID[id.ShopifyStore] `json:"id"`
	ShopDomain string                 `json:"shop_domain"`
	ShopName   pgtype.Text            `json:"shop_name"`
	Timezone   pgtype.Text            `json:"timezone"`
	Currency   pgtype.Text            `json:"currency"`
}

func (q *Queries) CreateOrUpdateShopifyStore(ctx context.Context, arg CreateOrUpdateShopifyStoreParams) (ShopifyStore, error) {
	row := q.db.QueryRow(ctx, createOrUpdateShopifyStore,
		arg.ID,
		arg.ShopDomain,
		arg.ShopName,
		arg.Timezone,
		arg.Currency,
	)
	var i ShopifyStore
	err := row.Scan(
		&i.ID,
		&i.ShopDomain,
		&i.ShopName,
		&i.Timezone,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createShopifyStore = `-- name: CreateShopifyStore :one
INSERT INTO shopify_store (id, shop_domain, shop_name, timezone, currency, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, NOW(), NOW())
RETURNING id, shop_domain, shop_name, timezone, currency, created_at, updated_at
`

type CreateShopifyStoreParams struct {
	ID         id.ID[id.ShopifyStore] `json:"id"`
	ShopDomain string                 `json:"shop_domain"`
	ShopName   pgtype.Text            `json:"shop_name"`
	Timezone   pgtype.Text            `json:"timezone"`
	Currency   pgtype.Text            `json:"currency"`
}

func (q *Queries) CreateShopifyStore(ctx context.Context, arg CreateShopifyStoreParams) (ShopifyStore, error) {
	row := q.db.QueryRow(ctx, createShopifyStore,
		arg.ID,
		arg.ShopDomain,
		arg.ShopName,
		arg.Timezone,
		arg.Currency,
	)
	var i ShopifyStore
	err := row.Scan(
		&i.ID,
		&i.ShopDomain,
		&i.ShopName,
		&i.Timezone,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getShopifyStoreByDomain = `-- name: GetShopifyStoreByDomain :one
SELECT id, shop_domain, shop_name, timezone, currency, created_at, updated_at
FROM shopify_store
WHERE shop_domain = $1
`

func (q *Queries) GetShopifyStoreByDomain(ctx context.Context, shopDomain string) (ShopifyStore, error) {
	row := q.db.QueryRow(ctx, getShopifyStoreByDomain, shopDomain)
	var i ShopifyStore
	err := row.Scan(
		&i.ID,
		&i.ShopDomain,
		&i.ShopName,
		&i.Timezone,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getShopifyStoreByID = `-- name: GetShopifyStoreByID :one
SELECT id, shop_domain, shop_name, timezone, currency, created_at, updated_at
FROM shopify_store
WHERE id = $1
`

func (q *Queries) GetShopifyStoreByID(ctx context.Context, argID id.ID[id.ShopifyStore]) (ShopifyStore, error) {
	row := q.db.QueryRow(ctx, getShopifyStoreByID, argID)
	var i ShopifyStore
	err := row.Scan(
		&i.ID,
		&i.ShopDomain,
		&i.ShopName,
		&i.Timezone,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateShopifyStore = `-- name: UpdateShopifyStore :one
UPDATE shopify_store
SET shop_name = $2, timezone = $3, currency = $4, updated_at = NOW()
WHERE shop_domain = $1
RETURNING id, shop_domain, shop_name, timezone, currency, created_at, updated_at
`

type UpdateShopifyStoreParams struct {
	ShopDomain string      `json:"shop_domain"`
	ShopName   pgtype.Text `json:"shop_name"`
	Timezone   pgtype.Text `json:"timezone"`
	Currency   pgtype.Text `json:"currency"`
}

func (q *Queries) UpdateShopifyStore(ctx context.Context, arg UpdateShopifyStoreParams) (ShopifyStore, error) {
	row := q.db.QueryRow(ctx, updateShopifyStore,
		arg.ShopDomain,
		arg.ShopName,
		arg.Timezone,
		arg.Currency,
	)
	var i ShopifyStore
	err := row.Scan(
		&i.ID,
		&i.ShopDomain,
		&i.ShopName,
		&i.Timezone,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
