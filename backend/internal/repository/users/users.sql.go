// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package users

import (
	"context"

	"github.com/ConradKurth/forecasting/backend/pkg/id"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at)
VALUES ($1, NOW(), NOW())
RETURNING id, created_at, updated_at
`

func (q *Queries) CreateUser(ctx context.Context, argID id.ID[id.User]) (User, error) {
	row := q.db.QueryRow(ctx, createUser, argID)
	var i User
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, created_at, updated_at
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, argID id.ID[id.User]) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, argID)
	var i User
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET updated_at = NOW()
WHERE id = $1
RETURNING id, created_at, updated_at
`

func (q *Queries) UpdateUser(ctx context.Context, argID id.ID[id.User]) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, argID)
	var i User
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
