// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: orders.sql

package core

import (
	"context"

	"github.com/ConradKurth/forecasting/backend/pkg/id"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (id, integration_id, external_id, created_at, financial_status, fulfillment_status, total_price, cancelled_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, integration_id, external_id, created_at, financial_status, fulfillment_status, total_price, cancelled_at
`

type CreateOrderParams struct {
	ID                id.ID[id.Order]               `json:"id"`
	IntegrationID     id.ID[id.PlatformIntegration] `json:"integration_id"`
	ExternalID        pgtype.Text                   `json:"external_id"`
	CreatedAt         pgtype.Timestamp              `json:"created_at"`
	FinancialStatus   FinancialStatus               `json:"financial_status"`
	FulfillmentStatus FulfillmentStatus             `json:"fulfillment_status"`
	TotalPrice        pgtype.Numeric                `json:"total_price"`
	CancelledAt       pgtype.Timestamp              `json:"cancelled_at"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.ID,
		arg.IntegrationID,
		arg.ExternalID,
		arg.CreatedAt,
		arg.FinancialStatus,
		arg.FulfillmentStatus,
		arg.TotalPrice,
		arg.CancelledAt,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.IntegrationID,
		&i.ExternalID,
		&i.CreatedAt,
		&i.FinancialStatus,
		&i.FulfillmentStatus,
		&i.TotalPrice,
		&i.CancelledAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders WHERE id = $1 AND integration_id = $2
`

type DeleteOrderParams struct {
	ID            id.ID[id.Order]               `json:"id"`
	IntegrationID id.ID[id.PlatformIntegration] `json:"integration_id"`
}

func (q *Queries) DeleteOrder(ctx context.Context, arg DeleteOrderParams) error {
	_, err := q.db.Exec(ctx, deleteOrder, arg.ID, arg.IntegrationID)
	return err
}

const getOrderByExternalID = `-- name: GetOrderByExternalID :one
SELECT id, integration_id, external_id, created_at, financial_status, fulfillment_status, total_price, cancelled_at
FROM orders
WHERE integration_id = $1 AND external_id = $2
`

type GetOrderByExternalIDParams struct {
	IntegrationID id.ID[id.PlatformIntegration] `json:"integration_id"`
	ExternalID    pgtype.Text                   `json:"external_id"`
}

func (q *Queries) GetOrderByExternalID(ctx context.Context, arg GetOrderByExternalIDParams) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderByExternalID, arg.IntegrationID, arg.ExternalID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.IntegrationID,
		&i.ExternalID,
		&i.CreatedAt,
		&i.FinancialStatus,
		&i.FulfillmentStatus,
		&i.TotalPrice,
		&i.CancelledAt,
	)
	return i, err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, integration_id, external_id, created_at, financial_status, fulfillment_status, total_price, cancelled_at
FROM orders
WHERE id = $1
`

func (q *Queries) GetOrderByID(ctx context.Context, argID id.ID[id.Order]) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderByID, argID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.IntegrationID,
		&i.ExternalID,
		&i.CreatedAt,
		&i.FinancialStatus,
		&i.FulfillmentStatus,
		&i.TotalPrice,
		&i.CancelledAt,
	)
	return i, err
}

const getOrdersByIntegrationID = `-- name: GetOrdersByIntegrationID :many
SELECT id, integration_id, external_id, created_at, financial_status, fulfillment_status, total_price, cancelled_at
FROM orders
WHERE integration_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetOrdersByIntegrationIDParams struct {
	IntegrationID id.ID[id.PlatformIntegration] `json:"integration_id"`
	Limit         int32                         `json:"limit"`
	Offset        int32                         `json:"offset"`
}

func (q *Queries) GetOrdersByIntegrationID(ctx context.Context, arg GetOrdersByIntegrationIDParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, getOrdersByIntegrationID, arg.IntegrationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.IntegrationID,
			&i.ExternalID,
			&i.CreatedAt,
			&i.FinancialStatus,
			&i.FulfillmentStatus,
			&i.TotalPrice,
			&i.CancelledAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrdersByIntegrationIDSince = `-- name: GetOrdersByIntegrationIDSince :many
SELECT id, integration_id, external_id, created_at, financial_status, fulfillment_status, total_price, cancelled_at
FROM orders
WHERE integration_id = $1 AND created_at >= $2
ORDER BY created_at DESC
LIMIT $3 OFFSET $4
`

type GetOrdersByIntegrationIDSinceParams struct {
	IntegrationID id.ID[id.PlatformIntegration] `json:"integration_id"`
	CreatedAt     pgtype.Timestamp              `json:"created_at"`
	Limit         int32                         `json:"limit"`
	Offset        int32                         `json:"offset"`
}

func (q *Queries) GetOrdersByIntegrationIDSince(ctx context.Context, arg GetOrdersByIntegrationIDSinceParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, getOrdersByIntegrationIDSince,
		arg.IntegrationID,
		arg.CreatedAt,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.IntegrationID,
			&i.ExternalID,
			&i.CreatedAt,
			&i.FinancialStatus,
			&i.FulfillmentStatus,
			&i.TotalPrice,
			&i.CancelledAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

type InsertOrdersBatchParams struct {
	ID                id.ID[id.Order]               `json:"id"`
	IntegrationID     id.ID[id.PlatformIntegration] `json:"integration_id"`
	ExternalID        pgtype.Text                   `json:"external_id"`
	CreatedAt         pgtype.Timestamp              `json:"created_at"`
	FinancialStatus   FinancialStatus               `json:"financial_status"`
	FulfillmentStatus FulfillmentStatus             `json:"fulfillment_status"`
	TotalPrice        pgtype.Numeric                `json:"total_price"`
	CancelledAt       pgtype.Timestamp              `json:"cancelled_at"`
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders
SET financial_status = $3, fulfillment_status = $4, total_price = $5, cancelled_at = $6
WHERE id = $1 AND integration_id = $2
RETURNING id, integration_id, external_id, created_at, financial_status, fulfillment_status, total_price, cancelled_at
`

type UpdateOrderParams struct {
	ID                id.ID[id.Order]               `json:"id"`
	IntegrationID     id.ID[id.PlatformIntegration] `json:"integration_id"`
	FinancialStatus   FinancialStatus               `json:"financial_status"`
	FulfillmentStatus FulfillmentStatus             `json:"fulfillment_status"`
	TotalPrice        pgtype.Numeric                `json:"total_price"`
	CancelledAt       pgtype.Timestamp              `json:"cancelled_at"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrder,
		arg.ID,
		arg.IntegrationID,
		arg.FinancialStatus,
		arg.FulfillmentStatus,
		arg.TotalPrice,
		arg.CancelledAt,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.IntegrationID,
		&i.ExternalID,
		&i.CreatedAt,
		&i.FinancialStatus,
		&i.FulfillmentStatus,
		&i.TotalPrice,
		&i.CancelledAt,
	)
	return i, err
}

const upsertOrder = `-- name: UpsertOrder :one
INSERT INTO orders (id, integration_id, external_id, created_at, financial_status, fulfillment_status, total_price, cancelled_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
ON CONFLICT (external_id)
DO UPDATE SET
    financial_status = EXCLUDED.financial_status,
    fulfillment_status = EXCLUDED.fulfillment_status,
    total_price = EXCLUDED.total_price,
    cancelled_at = EXCLUDED.cancelled_at
RETURNING id, integration_id, external_id, created_at, financial_status, fulfillment_status, total_price, cancelled_at
`

type UpsertOrderParams struct {
	ID                id.ID[id.Order]               `json:"id"`
	IntegrationID     id.ID[id.PlatformIntegration] `json:"integration_id"`
	ExternalID        pgtype.Text                   `json:"external_id"`
	CreatedAt         pgtype.Timestamp              `json:"created_at"`
	FinancialStatus   FinancialStatus               `json:"financial_status"`
	FulfillmentStatus FulfillmentStatus             `json:"fulfillment_status"`
	TotalPrice        pgtype.Numeric                `json:"total_price"`
	CancelledAt       pgtype.Timestamp              `json:"cancelled_at"`
}

func (q *Queries) UpsertOrder(ctx context.Context, arg UpsertOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, upsertOrder,
		arg.ID,
		arg.IntegrationID,
		arg.ExternalID,
		arg.CreatedAt,
		arg.FinancialStatus,
		arg.FulfillmentStatus,
		arg.TotalPrice,
		arg.CancelledAt,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.IntegrationID,
		&i.ExternalID,
		&i.CreatedAt,
		&i.FinancialStatus,
		&i.FulfillmentStatus,
		&i.TotalPrice,
		&i.CancelledAt,
	)
	return i, err
}
