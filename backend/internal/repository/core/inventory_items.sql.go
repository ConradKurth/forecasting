// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: inventory_items.sql

package core

import (
	"context"

	"github.com/ConradKurth/forecasting/backend/pkg/id"
	"github.com/jackc/pgx/v5/pgtype"
)

const createInventoryItem = `-- name: CreateInventoryItem :one
INSERT INTO inventory_items (id, integration_id, external_id, sku, tracked, cost, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, NOW(), NOW())
RETURNING id, integration_id, external_id, sku, tracked, cost, created_at, updated_at
`

type CreateInventoryItemParams struct {
	ID            id.ID[id.InventoryItem]       `json:"id"`
	IntegrationID id.ID[id.PlatformIntegration] `json:"integration_id"`
	ExternalID    pgtype.Text                   `json:"external_id"`
	Sku           pgtype.Text                   `json:"sku"`
	Tracked       pgtype.Bool                   `json:"tracked"`
	Cost          pgtype.Numeric                `json:"cost"`
}

func (q *Queries) CreateInventoryItem(ctx context.Context, arg CreateInventoryItemParams) (InventoryItem, error) {
	row := q.db.QueryRow(ctx, createInventoryItem,
		arg.ID,
		arg.IntegrationID,
		arg.ExternalID,
		arg.Sku,
		arg.Tracked,
		arg.Cost,
	)
	var i InventoryItem
	err := row.Scan(
		&i.ID,
		&i.IntegrationID,
		&i.ExternalID,
		&i.Sku,
		&i.Tracked,
		&i.Cost,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInventoryItemByExternalID = `-- name: GetInventoryItemByExternalID :one
SELECT id, integration_id, external_id, sku, tracked, cost, created_at, updated_at
FROM inventory_items
WHERE integration_id = $1 AND external_id = $2
`

type GetInventoryItemByExternalIDParams struct {
	IntegrationID id.ID[id.PlatformIntegration] `json:"integration_id"`
	ExternalID    pgtype.Text                   `json:"external_id"`
}

func (q *Queries) GetInventoryItemByExternalID(ctx context.Context, arg GetInventoryItemByExternalIDParams) (InventoryItem, error) {
	row := q.db.QueryRow(ctx, getInventoryItemByExternalID, arg.IntegrationID, arg.ExternalID)
	var i InventoryItem
	err := row.Scan(
		&i.ID,
		&i.IntegrationID,
		&i.ExternalID,
		&i.Sku,
		&i.Tracked,
		&i.Cost,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInventoryItemByID = `-- name: GetInventoryItemByID :one
SELECT id, integration_id, external_id, sku, tracked, cost, created_at, updated_at
FROM inventory_items
WHERE id = $1
`

func (q *Queries) GetInventoryItemByID(ctx context.Context, argID id.ID[id.InventoryItem]) (InventoryItem, error) {
	row := q.db.QueryRow(ctx, getInventoryItemByID, argID)
	var i InventoryItem
	err := row.Scan(
		&i.ID,
		&i.IntegrationID,
		&i.ExternalID,
		&i.Sku,
		&i.Tracked,
		&i.Cost,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInventoryItemsByIntegrationID = `-- name: GetInventoryItemsByIntegrationID :many
SELECT id, integration_id, external_id, sku, tracked, cost, created_at, updated_at
FROM inventory_items
WHERE integration_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetInventoryItemsByIntegrationIDParams struct {
	IntegrationID id.ID[id.PlatformIntegration] `json:"integration_id"`
	Limit         int32                         `json:"limit"`
	Offset        int32                         `json:"offset"`
}

func (q *Queries) GetInventoryItemsByIntegrationID(ctx context.Context, arg GetInventoryItemsByIntegrationIDParams) ([]InventoryItem, error) {
	rows, err := q.db.Query(ctx, getInventoryItemsByIntegrationID, arg.IntegrationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InventoryItem{}
	for rows.Next() {
		var i InventoryItem
		if err := rows.Scan(
			&i.ID,
			&i.IntegrationID,
			&i.ExternalID,
			&i.Sku,
			&i.Tracked,
			&i.Cost,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertInventoryItem = `-- name: UpsertInventoryItem :one
INSERT INTO inventory_items (id, integration_id, external_id, sku, tracked, cost, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, NOW(), NOW())
ON CONFLICT (integration_id, external_id)
DO UPDATE SET
    sku = EXCLUDED.sku,
    tracked = EXCLUDED.tracked,
    cost = EXCLUDED.cost,
    updated_at = NOW()
RETURNING id, integration_id, external_id, sku, tracked, cost, created_at, updated_at
`

type UpsertInventoryItemParams struct {
	ID            id.ID[id.InventoryItem]       `json:"id"`
	IntegrationID id.ID[id.PlatformIntegration] `json:"integration_id"`
	ExternalID    pgtype.Text                   `json:"external_id"`
	Sku           pgtype.Text                   `json:"sku"`
	Tracked       pgtype.Bool                   `json:"tracked"`
	Cost          pgtype.Numeric                `json:"cost"`
}

func (q *Queries) UpsertInventoryItem(ctx context.Context, arg UpsertInventoryItemParams) (InventoryItem, error) {
	row := q.db.QueryRow(ctx, upsertInventoryItem,
		arg.ID,
		arg.IntegrationID,
		arg.ExternalID,
		arg.Sku,
		arg.Tracked,
		arg.Cost,
	)
	var i InventoryItem
	err := row.Scan(
		&i.ID,
		&i.IntegrationID,
		&i.ExternalID,
		&i.Sku,
		&i.Tracked,
		&i.Cost,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
