// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: copyfrom.go

package core

import (
	"context"
)

// iteratorForInsertOrdersBatch implements pgx.CopyFromSource.
type iteratorForInsertOrdersBatch struct {
	rows                 []InsertOrdersBatchParams
	skippedFirstNextCall bool
}

func (r *iteratorForInsertOrdersBatch) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsertOrdersBatch) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].IntegrationID,
		r.rows[0].ExternalID,
		r.rows[0].CreatedAt,
		r.rows[0].FinancialStatus,
		r.rows[0].FulfillmentStatus,
		r.rows[0].TotalPrice,
		r.rows[0].CancelledAt,
	}, nil
}

func (r iteratorForInsertOrdersBatch) Err() error {
	return nil
}

func (q *Queries) InsertOrdersBatch(ctx context.Context, arg []InsertOrdersBatchParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"orders"}, []string{"id", "integration_id", "external_id", "created_at", "financial_status", "fulfillment_status", "total_price", "cancelled_at"}, &iteratorForInsertOrdersBatch{rows: arg})
}

// iteratorForInsertProductsBatch implements pgx.CopyFromSource.
type iteratorForInsertProductsBatch struct {
	rows                 []InsertProductsBatchParams
	skippedFirstNextCall bool
}

func (r *iteratorForInsertProductsBatch) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsertProductsBatch) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].IntegrationID,
		r.rows[0].ExternalID,
		r.rows[0].Title,
		r.rows[0].Handle,
		r.rows[0].ProductType,
		r.rows[0].Status,
		r.rows[0].CreatedAt,
		r.rows[0].UpdatedAt,
	}, nil
}

func (r iteratorForInsertProductsBatch) Err() error {
	return nil
}

func (q *Queries) InsertProductsBatch(ctx context.Context, arg []InsertProductsBatchParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"products"}, []string{"id", "integration_id", "external_id", "title", "handle", "product_type", "status", "created_at", "updated_at"}, &iteratorForInsertProductsBatch{rows: arg})
}
