// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: platform_integrations.sql

package core

import (
	"context"

	"github.com/ConradKurth/forecasting/backend/pkg/id"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPlatformIntegration = `-- name: CreatePlatformIntegration :one
INSERT INTO platform_integrations (id, shop_id, platform_type, platform_shop_id, is_active, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, NOW(), NOW())
RETURNING id, shop_id, platform_type, platform_shop_id, is_active, created_at, updated_at
`

type CreatePlatformIntegrationParams struct {
	ID             id.ID[id.PlatformIntegration] `json:"id"`
	ShopID         id.ID[id.ShopifyStore]        `json:"shop_id"`
	PlatformType   PlatformType                  `json:"platform_type"`
	PlatformShopID string                        `json:"platform_shop_id"`
	IsActive       pgtype.Bool                   `json:"is_active"`
}

func (q *Queries) CreatePlatformIntegration(ctx context.Context, arg CreatePlatformIntegrationParams) (PlatformIntegration, error) {
	row := q.db.QueryRow(ctx, createPlatformIntegration,
		arg.ID,
		arg.ShopID,
		arg.PlatformType,
		arg.PlatformShopID,
		arg.IsActive,
	)
	var i PlatformIntegration
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.PlatformType,
		&i.PlatformShopID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deactivatePlatformIntegration = `-- name: DeactivatePlatformIntegration :exec
UPDATE platform_integrations
SET is_active = false, updated_at = NOW()
WHERE id = $1
`

func (q *Queries) DeactivatePlatformIntegration(ctx context.Context, argID id.ID[id.PlatformIntegration]) error {
	_, err := q.db.Exec(ctx, deactivatePlatformIntegration, argID)
	return err
}

const getPlatformIntegrationByID = `-- name: GetPlatformIntegrationByID :one
SELECT id, shop_id, platform_type, platform_shop_id, is_active, created_at, updated_at
FROM platform_integrations
WHERE id = $1
`

func (q *Queries) GetPlatformIntegrationByID(ctx context.Context, argID id.ID[id.PlatformIntegration]) (PlatformIntegration, error) {
	row := q.db.QueryRow(ctx, getPlatformIntegrationByID, argID)
	var i PlatformIntegration
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.PlatformType,
		&i.PlatformShopID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPlatformIntegrationByShopAndType = `-- name: GetPlatformIntegrationByShopAndType :one
SELECT id, shop_id, platform_type, platform_shop_id, is_active, created_at, updated_at
FROM platform_integrations
WHERE shop_id = $1 AND platform_type = $2 AND is_active = true
`

type GetPlatformIntegrationByShopAndTypeParams struct {
	ShopID       id.ID[id.ShopifyStore] `json:"shop_id"`
	PlatformType PlatformType           `json:"platform_type"`
}

func (q *Queries) GetPlatformIntegrationByShopAndType(ctx context.Context, arg GetPlatformIntegrationByShopAndTypeParams) (PlatformIntegration, error) {
	row := q.db.QueryRow(ctx, getPlatformIntegrationByShopAndType, arg.ShopID, arg.PlatformType)
	var i PlatformIntegration
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.PlatformType,
		&i.PlatformShopID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPlatformIntegrationsByShopID = `-- name: GetPlatformIntegrationsByShopID :many
SELECT id, shop_id, platform_type, platform_shop_id, is_active, created_at, updated_at
FROM platform_integrations
WHERE shop_id = $1 AND is_active = true
ORDER BY created_at DESC
`

func (q *Queries) GetPlatformIntegrationsByShopID(ctx context.Context, shopID id.ID[id.ShopifyStore]) ([]PlatformIntegration, error) {
	rows, err := q.db.Query(ctx, getPlatformIntegrationsByShopID, shopID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PlatformIntegration{}
	for rows.Next() {
		var i PlatformIntegration
		if err := rows.Scan(
			&i.ID,
			&i.ShopID,
			&i.PlatformType,
			&i.PlatformShopID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlatformIntegration = `-- name: UpdatePlatformIntegration :one
UPDATE platform_integrations
SET is_active = $3, updated_at = NOW()
WHERE id = $1 AND shop_id = $2
RETURNING id, shop_id, platform_type, platform_shop_id, is_active, created_at, updated_at
`

type UpdatePlatformIntegrationParams struct {
	ID       id.ID[id.PlatformIntegration] `json:"id"`
	ShopID   id.ID[id.ShopifyStore]        `json:"shop_id"`
	IsActive pgtype.Bool                   `json:"is_active"`
}

func (q *Queries) UpdatePlatformIntegration(ctx context.Context, arg UpdatePlatformIntegrationParams) (PlatformIntegration, error) {
	row := q.db.QueryRow(ctx, updatePlatformIntegration, arg.ID, arg.ShopID, arg.IsActive)
	var i PlatformIntegration
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.PlatformType,
		&i.PlatformShopID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertPlatformIntegration = `-- name: UpsertPlatformIntegration :one
INSERT INTO platform_integrations (id, shop_id, platform_type, platform_shop_id, is_active, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, NOW(), NOW())
ON CONFLICT (platform_shop_id, platform_type)
DO UPDATE SET
    is_active = EXCLUDED.is_active,
    updated_at = NOW()
RETURNING id, shop_id, platform_type, platform_shop_id, is_active, created_at, updated_at
`

type UpsertPlatformIntegrationParams struct {
	ID             id.ID[id.PlatformIntegration] `json:"id"`
	ShopID         id.ID[id.ShopifyStore]        `json:"shop_id"`
	PlatformType   PlatformType                  `json:"platform_type"`
	PlatformShopID string                        `json:"platform_shop_id"`
	IsActive       pgtype.Bool                   `json:"is_active"`
}

func (q *Queries) UpsertPlatformIntegration(ctx context.Context, arg UpsertPlatformIntegrationParams) (PlatformIntegration, error) {
	row := q.db.QueryRow(ctx, upsertPlatformIntegration,
		arg.ID,
		arg.ShopID,
		arg.PlatformType,
		arg.PlatformShopID,
		arg.IsActive,
	)
	var i PlatformIntegration
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.PlatformType,
		&i.PlatformShopID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
