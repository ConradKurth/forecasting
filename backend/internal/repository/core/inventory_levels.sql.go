// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: inventory_levels.sql

package core

import (
	"context"

	"github.com/ConradKurth/forecasting/backend/pkg/id"
	"github.com/jackc/pgx/v5/pgtype"
)

const createInventoryLevel = `-- name: CreateInventoryLevel :one
INSERT INTO inventory_levels (id, inventory_item_id, location_id, available, updated_at)
VALUES ($1, $2, $3, $4, NOW())
RETURNING id, inventory_item_id, location_id, available, updated_at
`

type CreateInventoryLevelParams struct {
	ID              id.ID[id.InventoryLevel] `json:"id"`
	InventoryItemID id.ID[id.InventoryItem]  `json:"inventory_item_id"`
	LocationID      id.ID[id.Location]       `json:"location_id"`
	Available       pgtype.Int4              `json:"available"`
}

func (q *Queries) CreateInventoryLevel(ctx context.Context, arg CreateInventoryLevelParams) (InventoryLevel, error) {
	row := q.db.QueryRow(ctx, createInventoryLevel,
		arg.ID,
		arg.InventoryItemID,
		arg.LocationID,
		arg.Available,
	)
	var i InventoryLevel
	err := row.Scan(
		&i.ID,
		&i.InventoryItemID,
		&i.LocationID,
		&i.Available,
		&i.UpdatedAt,
	)
	return i, err
}

const getInventoryLevelByID = `-- name: GetInventoryLevelByID :one
SELECT id, inventory_item_id, location_id, available, updated_at
FROM inventory_levels
WHERE id = $1
`

func (q *Queries) GetInventoryLevelByID(ctx context.Context, argID id.ID[id.InventoryLevel]) (InventoryLevel, error) {
	row := q.db.QueryRow(ctx, getInventoryLevelByID, argID)
	var i InventoryLevel
	err := row.Scan(
		&i.ID,
		&i.InventoryItemID,
		&i.LocationID,
		&i.Available,
		&i.UpdatedAt,
	)
	return i, err
}

const getInventoryLevelsByInventoryItemID = `-- name: GetInventoryLevelsByInventoryItemID :many
SELECT id, inventory_item_id, location_id, available, updated_at
FROM inventory_levels
WHERE inventory_item_id = $1
ORDER BY location_id
`

func (q *Queries) GetInventoryLevelsByInventoryItemID(ctx context.Context, inventoryItemID id.ID[id.InventoryItem]) ([]InventoryLevel, error) {
	rows, err := q.db.Query(ctx, getInventoryLevelsByInventoryItemID, inventoryItemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InventoryLevel{}
	for rows.Next() {
		var i InventoryLevel
		if err := rows.Scan(
			&i.ID,
			&i.InventoryItemID,
			&i.LocationID,
			&i.Available,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInventoryLevelsByLocationID = `-- name: GetInventoryLevelsByLocationID :many
SELECT id, inventory_item_id, location_id, available, updated_at
FROM inventory_levels
WHERE location_id = $1
ORDER BY inventory_item_id
`

func (q *Queries) GetInventoryLevelsByLocationID(ctx context.Context, locationID id.ID[id.Location]) ([]InventoryLevel, error) {
	rows, err := q.db.Query(ctx, getInventoryLevelsByLocationID, locationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InventoryLevel{}
	for rows.Next() {
		var i InventoryLevel
		if err := rows.Scan(
			&i.ID,
			&i.InventoryItemID,
			&i.LocationID,
			&i.Available,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertInventoryLevel = `-- name: UpsertInventoryLevel :one
INSERT INTO inventory_levels (id, inventory_item_id, location_id, available, updated_at)
VALUES ($1, $2, $3, $4, NOW())
ON CONFLICT (inventory_item_id, location_id)
DO UPDATE SET
    available = EXCLUDED.available,
    updated_at = NOW()
RETURNING id, inventory_item_id, location_id, available, updated_at
`

type UpsertInventoryLevelParams struct {
	ID              id.ID[id.InventoryLevel] `json:"id"`
	InventoryItemID id.ID[id.InventoryItem]  `json:"inventory_item_id"`
	LocationID      id.ID[id.Location]       `json:"location_id"`
	Available       pgtype.Int4              `json:"available"`
}

func (q *Queries) UpsertInventoryLevel(ctx context.Context, arg UpsertInventoryLevelParams) (InventoryLevel, error) {
	row := q.db.QueryRow(ctx, upsertInventoryLevel,
		arg.ID,
		arg.InventoryItemID,
		arg.LocationID,
		arg.Available,
	)
	var i InventoryLevel
	err := row.Scan(
		&i.ID,
		&i.InventoryItemID,
		&i.LocationID,
		&i.Available,
		&i.UpdatedAt,
	)
	return i, err
}
